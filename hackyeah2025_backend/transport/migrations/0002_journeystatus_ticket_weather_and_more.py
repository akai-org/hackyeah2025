# Generated by Django 5.2.7 on 2025-10-04 17:07

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('transport', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='JourneyStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_arrival', models.DateTimeField(verbose_name='Scheduled arrival')),
                ('actual_arrival', models.DateTimeField(blank=True, null=True, verbose_name='Actual arrival')),
                ('scheduled_departure', models.DateTimeField(verbose_name='Scheduled departure')),
                ('actual_departure', models.DateTimeField(blank=True, null=True, verbose_name='Actual departure')),
                ('delay_minutes', models.IntegerField(default=0, verbose_name='Delay at this station (minutes)')),
                ('platform_changed', models.BooleanField(default=False, help_text='Whether platform was changed from original')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Journey station status',
                'verbose_name_plural': 'Journey station statuses',
                'ordering': ['journey', 'route_point__sequence'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateTimeField(auto_now_add=True)),
                ('travel_date', models.DateField(verbose_name='Travel date')),
                ('departure_time', models.TimeField(verbose_name='Scheduled departure time')),
                ('seat_number', models.CharField(blank=True, max_length=20, verbose_name='Seat number')),
                ('ticket_number', models.CharField(max_length=100, unique=True, verbose_name='Ticket number')),
                ('status', models.CharField(choices=[('VALID', 'Valid'), ('USED', 'Used'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled')], default='VALID', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Price')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(choices=[('CLEAR', 'Clear'), ('RAIN', 'Rain'), ('SNOW', 'Snow'), ('FOG', 'Fog'), ('STORM', 'Storm'), ('ICE', 'Ice'), ('WIND', 'Strong wind'), ('EXTREME', 'Extreme conditions')], max_length=20, verbose_name='Weather condition')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Temperature (Â°C)')),
                ('speed_impact_percent', models.IntegerField(default=0, help_text='Negative percentage impact on vehicle speed (e.g., -20 means 20% slower)', validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(0)], verbose_name='Speed impact (%)')),
                ('visibility_meters', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Visibility (meters)')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(help_text='When this weather data expires', verbose_name='Valid until')),
            ],
            options={
                'verbose_name': 'Weather condition',
                'verbose_name_plural': 'Weather conditions',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='routedependency',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='routedependency',
            name='affecting_route_point',
        ),
        migrations.RemoveField(
            model_name='routedependency',
            name='dependent_route_point',
        ),
        migrations.RemoveField(
            model_name='routedependency',
            name='shared_track',
        ),
        migrations.AlterModelOptions(
            name='stationtype',
            options={'verbose_name': 'Station type', 'verbose_name_plural': 'Station types'},
        ),
        migrations.AlterUniqueTogether(
            name='report',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='vehicle',
            name='number_of_wagons',
        ),
        migrations.AddField(
            model_name='report',
            name='is_staff_reported',
            field=models.BooleanField(default=False, help_text='Whether any report was made by verified staff'),
        ),
        migrations.AddField(
            model_name='station',
            name='current_occupancy',
            field=models.IntegerField(default=0, help_text='Number of trains currently at the station', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Current occupancy'),
        ),
        migrations.AddField(
            model_name='station',
            name='platform_capacity',
            field=models.IntegerField(default=5, help_text='Maximum number of trains that can be at station simultaneously', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Platform capacity'),
        ),
        migrations.AddField(
            model_name='userreport',
            name='confidence_level',
            field=models.DecimalField(decimal_places=2, default=0.5, help_text='How confident the user is about this report (0-1, where 1 is very confident)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Confidence level'),
        ),
        migrations.AddField(
            model_name='userreport',
            name='is_staff_report',
            field=models.BooleanField(default=False, help_text='Whether this report is from railway staff (more credible)', verbose_name='Staff report'),
        ),
        migrations.CreateModel(
            name='Journey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('journey_date', models.DateField(help_text='Date when this journey takes place', verbose_name='Journey date')),
                ('scheduled_departure', models.DateTimeField(help_text='When the journey is scheduled to start', verbose_name='Scheduled departure time')),
                ('actual_departure', models.DateTimeField(blank=True, null=True, verbose_name='Actual departure time')),
                ('scheduled_arrival', models.DateTimeField(help_text='When the journey is scheduled to end at final station', verbose_name='Scheduled arrival time')),
                ('actual_arrival', models.DateTimeField(blank=True, null=True, verbose_name='Actual arrival time')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('BOARDING', 'Boarding'), ('DEPARTED', 'Departed'), ('IN_TRANSIT', 'In transit'), ('DELAYED', 'Delayed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed')], default='SCHEDULED', max_length=20, verbose_name='Journey status')),
                ('current_delay_minutes', models.IntegerField(default=0, help_text='Current delay in minutes', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Current delay (minutes)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_station', models.ForeignKey(blank=True, help_text='Station where vehicle currently is', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_journeys', to='transport.station', verbose_name='Current station')),
                ('next_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='next_journeys', to='transport.station', verbose_name='Next station')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journeys', to='transport.route', verbose_name='Route')),
                ('vehicle', models.ForeignKey(help_text='Specific vehicle making this journey', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journeys', to='transport.vehicle', verbose_name='Assigned vehicle')),
            ],
            options={
                'verbose_name': 'Journey',
                'verbose_name_plural': 'Journeys',
                'ordering': ['-journey_date', '-scheduled_departure'],
            },
        ),
        migrations.AddField(
            model_name='report',
            name='journey',
            field=models.ForeignKey(blank=True, help_text='Specific journey this report is about (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='transport.journey', verbose_name='Journey'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['journey', '-created_at'], name='transport_r_journey_e8902c_idx'),
        ),
        migrations.AddField(
            model_name='journeystatus',
            name='actual_platform',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journey_statuses', to='transport.platform', verbose_name='Actual platform used'),
        ),
        migrations.AddField(
            model_name='journeystatus',
            name='journey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='station_statuses', to='transport.journey', verbose_name='Journey'),
        ),
        migrations.AddField(
            model_name='journeystatus',
            name='route_point',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journey_statuses', to='transport.routepoint', verbose_name='Route point'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='from_station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets_from', to='transport.station', verbose_name='From station'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='route',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='transport.route', verbose_name='Route'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='to_station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets_to', to='transport.station', verbose_name='To station'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='vehicle',
            field=models.ForeignKey(blank=True, help_text='Specific vehicle user is assigned to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='transport.vehicle', verbose_name='Assigned vehicle'),
        ),
        migrations.AddField(
            model_name='userreport',
            name='ticket',
            field=models.ForeignKey(blank=True, help_text='Ticket that proves user was on this route', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='transport.ticket', verbose_name='Associated ticket'),
        ),
        migrations.AddField(
            model_name='weather',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_conditions', to='transport.station', verbose_name='Station'),
        ),
        migrations.AddField(
            model_name='userreport',
            name='weather_condition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='transport.weather', verbose_name='Weather at time of report'),
        ),
        migrations.DeleteModel(
            name='RouteDependency',
        ),
        migrations.AddIndex(
            model_name='journey',
            index=models.Index(fields=['journey_date', 'route'], name='transport_j_journey_56c2f0_idx'),
        ),
        migrations.AddIndex(
            model_name='journey',
            index=models.Index(fields=['status', '-journey_date'], name='transport_j_status_8cf951_idx'),
        ),
        migrations.AddIndex(
            model_name='journey',
            index=models.Index(fields=['vehicle', '-journey_date'], name='transport_j_vehicle_65975f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='journeystatus',
            unique_together={('journey', 'route_point')},
        ),
    ]
