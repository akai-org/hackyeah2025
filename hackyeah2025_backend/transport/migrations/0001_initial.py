# Generated by Django 5.2.7 on 2025-10-04 16:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Carrier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Carrier name')),
                ('priority', models.IntegerField(default=0, help_text='Carrier priority (0-10, where 10 is highest)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('ticket_purchase_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='Ticket purchase link')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Carrier',
                'verbose_name_plural': 'Carriers',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ReportType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Report type name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('severity', models.IntegerField(default=1, help_text='Severity level (1-5, where 5 is most severe)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('icon', models.CharField(blank=True, help_text='Icon name for frontend display', max_length=50)),
                ('color', models.CharField(default='#FF0000', help_text='Color code in HEX format (e.g., #FF0000)', max_length=7)),
                ('active', models.BooleanField(default=True, help_text='Whether this report type is currently available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Report type',
                'verbose_name_plural': 'Report types',
                'ordering': ['-severity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Station name')),
                ('location', models.CharField(help_text='Address or geographic coordinates', max_length=500)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude', max_digits=9, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Station',
                'verbose_name_plural': 'Stations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StationType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Station type name')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Route name')),
                ('line_number', models.CharField(help_text='e.g. IC 1234, Bus 125', max_length=50, verbose_name='Line number')),
                ('active', models.BooleanField(default=True, help_text='Whether the route is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('carrier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='transport.carrier', verbose_name='Carrier')),
            ],
            options={
                'verbose_name': 'Route',
                'verbose_name_plural': 'Routes',
                'ordering': ['line_number', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending verification'), ('CONFIRMED', 'Confirmed'), ('REJECTED', 'Rejected'), ('RESOLVED', 'Resolved')], default='PENDING', max_length=20, verbose_name='Status')),
                ('average_delay_minutes', models.IntegerField(blank=True, help_text='Average delay from all user reports', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Average delay in minutes')),
                ('description', models.TextField(blank=True, help_text='Summary of user reports', verbose_name='Aggregated description')),
                ('user_reports_count', models.IntegerField(default=0, help_text='How many users reported this issue', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of user reports')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='Confirmed at')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved at')),
                ('report_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reports', to='transport.reporttype', verbose_name='Report type')),
                ('route', models.ForeignKey(help_text='Route where issue occurred', on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='transport.route', verbose_name='Route')),
                ('from_station', models.ForeignKey(help_text='Starting station of the problem section', on_delete=django.db.models.deletion.CASCADE, related_name='reports_from', to='transport.station', verbose_name='From station')),
                ('to_station', models.ForeignKey(help_text='Ending station of the problem section', on_delete=django.db.models.deletion.CASCADE, related_name='reports_to', to='transport.station', verbose_name='To station')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=50, verbose_name='Platform number')),
                ('max_wagons', models.IntegerField(default=10, help_text='Maximum number of wagons this platform can accommodate', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Maximum number of wagons')),
                ('active', models.BooleanField(default=True, help_text='Whether the platform is currently in use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platforms', to='transport.station', verbose_name='Station')),
            ],
            options={
                'verbose_name': 'Platform',
                'verbose_name_plural': 'Platforms',
                'ordering': ['station', 'number'],
            },
        ),
        migrations.AddField(
            model_name='station',
            name='type',
            field=models.ForeignKey(blank=True, help_text='Type of station (e.g., major hub, local stop, depot)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stations', to='transport.stationtype', verbose_name='Station type'),
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=50, unique=True, verbose_name='Track number')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='Track name/description')),
                ('length_meters', models.DecimalField(blank=True, decimal_places=2, help_text='Track length in meters', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_track', models.ForeignKey(blank=True, help_text='Main track from which this track branches', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_tracks', to='transport.track')),
            ],
            options={
                'verbose_name': 'Track',
                'verbose_name_plural': 'Tracks',
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='RoutePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.IntegerField(help_text='Stop order number in route (1, 2, 3...)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Order in route')),
                ('scheduled_arrival_time', models.TimeField(verbose_name='Scheduled arrival time')),
                ('scheduled_departure_time', models.TimeField(verbose_name='Scheduled departure time')),
                ('stop_duration_minutes', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stop duration (minutes)')),
                ('distance_from_previous_km', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Distance from previous point (km)')),
                ('platform', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_points', to='transport.platform', verbose_name='Platform')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_points', to='transport.route', verbose_name='Route')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_points', to='transport.station', verbose_name='Station')),
                ('track', models.ForeignKey(blank=True, help_text='Track used to reach this point', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_points', to='transport.track', verbose_name='Track')),
            ],
            options={
                'verbose_name': 'Route point',
                'verbose_name_plural': 'Route points',
                'ordering': ['route', 'sequence'],
            },
        ),
        migrations.CreateModel(
            name='RouteDependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependency_type', models.CharField(choices=[('BLOCKAGE', 'Track blockage'), ('DELAY', 'Delay'), ('PRIORITY', 'Priority conflict')], default='BLOCKAGE', max_length=50)),
                ('estimated_impact_minutes', models.IntegerField(default=5, help_text='Average delay resulting from this dependency', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Estimated impact (minutes)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('affecting_route_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affects', to='transport.routepoint', verbose_name='Affecting point')),
                ('dependent_route_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependent_on', to='transport.routepoint', verbose_name='Dependent point')),
                ('shared_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='transport.track', verbose_name='Shared track')),
            ],
            options={
                'verbose_name': 'Route dependency',
                'verbose_name_plural': 'Route dependencies',
                'ordering': ['shared_track', 'affecting_route_point'],
            },
        ),
        migrations.AddField(
            model_name='platform',
            name='track',
            field=models.ForeignKey(blank=True, help_text='Track assigned to this platform', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='platforms', to='transport.track', verbose_name='Track'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Phone number')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user is verified (trusted reporter)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User profile',
                'verbose_name_plural': 'User profiles',
            },
        ),
        migrations.CreateModel(
            name='UserReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delay_minutes', models.IntegerField(blank=True, help_text="User's reported delay duration", null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delay in minutes')),
                ('description', models.TextField(blank=True, help_text="User's description of the issue", verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='user_reports/', verbose_name='Image')),
                ('location_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='User location latitude')),
                ('location_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='User location longitude')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_reports', to='transport.report', verbose_name='Aggregated report')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_reports', to=settings.AUTH_USER_MODEL, verbose_name='Reporting user')),
            ],
            options={
                'verbose_name': 'User report',
                'verbose_name_plural': 'User reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_reports', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total number of reports')),
                ('confirmed_reports', models.IntegerField(default=0, help_text='Reports that were verified by community or admins', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of confirmed reports')),
                ('rejected_reports', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of rejected reports')),
                ('total_confirmations_given', models.IntegerField(default=0, help_text="How many times user confirmed other users' reports", validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total confirmations given')),
                ('reputation_score', models.IntegerField(default=0, help_text='User reputation based on report accuracy')),
                ('last_report_date', models.DateTimeField(blank=True, null=True, verbose_name='Last report date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User statistics',
                'verbose_name_plural': 'User statistics',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identification_number', models.CharField(max_length=100, unique=True, verbose_name='Vehicle identification number')),
                ('type', models.CharField(choices=[('TRAIN', 'Train'), ('BUS', 'Bus'), ('TRAM', 'Tram'), ('METRO', 'Metro'), ('OTHER', 'Other')], default='TRAIN', max_length=20)),
                ('max_speed', models.DecimalField(decimal_places=2, help_text='Maximum vehicle speed in km/h', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maximum speed (km/h)')),
                ('average_speed', models.DecimalField(blank=True, decimal_places=2, help_text='Average operational speed in km/h (calculated automatically)', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Average speed (km/h)')),
                ('number_of_wagons', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number of wagons')),
                ('passenger_capacity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Passenger capacity')),
                ('active', models.BooleanField(default=True, help_text='Whether the vehicle is currently in operation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('carrier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='transport.carrier', verbose_name='Carrier')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['carrier', 'identification_number'],
            },
        ),
        migrations.AddField(
            model_name='route',
            name='vehicle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routes', to='transport.vehicle', verbose_name='Assigned vehicle'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['-created_at'], name='transport_r_created_6f94f9_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['status', '-created_at'], name='transport_r_status_ad088d_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['route', 'from_station', 'to_station'], name='transport_r_route_i_e97a9d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='report',
            unique_together={('route', 'from_station', 'to_station', 'report_type', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='routepoint',
            unique_together={('route', 'sequence'), ('route', 'station', 'sequence')},
        ),
        migrations.AlterUniqueTogether(
            name='routedependency',
            unique_together={('affecting_route_point', 'dependent_route_point', 'shared_track')},
        ),
        migrations.AlterUniqueTogether(
            name='platform',
            unique_together={('station', 'number')},
        ),
        migrations.AlterUniqueTogether(
            name='userreport',
            unique_together={('report', 'user')},
        ),
    ]
